## 4.1.1. 外设配置
* 2台Metis Station小站，一台主讲端，一台听课端
* 主讲端需要 2个 摄像头，本地管理页面分别配置教师算法和学生算法。听课端需要1个摄像头，本地管理打开该摄像头。
* 显示器要求：分辨率1920*1080及以上

## 4.1.2. DemoMCS 演示
* 场景内容： <br>
   教师端启动四宫带录制，第一宫为导播画面，第二宫为本地教师摄像头回显，第三宫为本地学生摄像头回显 
   第四宫为声网拉流。学生端声网推送一路视频画面。    <br><br> 

* 脚本路径：**/home/user/EST/MCSScripts/DemoMCS/03_Scenario_Driven_Tests/S1E1/** <br>
          脚本详细执行步骤参考同目录下README.txt 文档。 <br> <br> 

* 下发的**MCS**：
   * 主讲端：
  
   ```json
   {
     "Name": "S1E1_Teacher",
     "Type": "MCS",
     "Description": "S1E1 teacher",
     "Version": "0.3",
     "VideoSpecs": [
         {
             "Name": "Teacher",
             "DeviceId": "",
             "Width": 1920,
             "Height": 1080,
             "FrameRate": 30
         },
         {
             "Name": "Student",
             "DeviceId": "",
             "Width": 1920,
             "Height": 1080,
             "FrameRate": 30
         }
     ],
     "VideoAiSpecs": [
         {
             "Name": "Teacher_Ai",
             "SourceName": "Teacher",
             "Algorithm": "Teacher Tracking",
             "ProcessRate": 10,
             "Width": 1920,
             "Height": 1080,
             "FrameRate": 30
         },
         {
             "Name": "Student_Ai",
             "SourceName": "Student",
             "Algorithm": "Student Tracking",
             "ProcessRate": 30,
             "Width": 1920,
             "Height": 1080,
             "FrameRate": 30
         }
     ],
     "VideoDirectorSpec": {
         "Name": "Director",
         "Width": 1920,
         "Height": 1080,
         "FrameRate": 30,
         "VideoSourceSet":["Student","Teacher","Student_Ai","Teacher_Ai"],
         "FrameSpec": {
             "Template": "single frame",
             "LayoutSpecs": [
                 {
                     "Position": 1,
                     "SelectionSpecs": [
                         {
                             "Priority": 1,
                             "VideoSource": "Student_Ai",
                             "State": "Stand_1",
                             "Delay": 2,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 5,
                             "VideoSource": "Teacher_Ai",
                             "State": "Move",
                             "Delay": 0,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 6,
                             "VideoSource": "Teacher_Ai",
                             "State": "Stand",
                             "Delay": 0,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 7,
                             "VideoSource": "Teacher",
                             "State": "Many",
                             "Delay": 0,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 8,
                             "VideoSource": "Teacher",
                             "State": "Out",
                             "Delay": 2,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 9,
                             "VideoSource": "Student",
                             "State": "Stand_N",
                             "Delay": 2,
                             "Timeout": 600
                         },
                         {
                             "Priority": 10,
                             "VideoSource": "Student",
                             "State": "Sit",
                             "Delay": 2,
                             "Timeout": 600
                         },
                         {
                             "Priority": 11,
                             "VideoSource": "Teacher",
                             "State": "NoTeacher",
                             "Delay": 2,
                             "Timeout": 2700
                         },
                         {
                             "Priority": 12,
                             "VideoSource": "Teacher",
                             "State": "Others",
                             "Delay": 0,
                             "Timeout": 2700
                         }
                     ]
                 }
             ]
         }
     },
     "VideoCodecSpecs": [
           {
               "Name": "Student_Codec",
               "SourceName": "Student",
               "Codec": "h.264",
               "iFrameInterval": 30,
               "idrInterval": 30,
               "BitRateMode": "vbr",
               "BitRate": "4mbps",
               "Profile": "main"
           }
       ],
     "RtcStreamSpec":
         {
             "Name": "Student_Pull",
             "Protocol": "Agora",
             "Channel": "S1E1_Channel",
             "Identity": "S1E1_Teacher"
         },
     "RenderSpecs": [
         {
             "Name": "Render_test",
             "DeviceId": "0800-0000",
             "CompositionSpec": [
                 {
                     "Geometry": [0, 0, 960, 540],
                     "SourceName": "Director"
                 },
                 {
                     "Geometry": [960, 0, 960, 540],
                     "SourceName": "Student"
                 },
                 {
                     "Geometry": [0, 540, 960, 540],
                     "SourceName": "Teacher"
                 },
                 {
                     "Geometry": [960, 540, 960, 540],
                     "SourceName": "Student_Pull"
                 }
             ]
         }
     ]
   }
   ```
* 说明： 
    1. 通过 `VideoSpecs` 添加2个摄像头作为**原始视频流**，并且通过 `VideoAiSpecs` 给摄像头配置算法，形成**添加
       算法处理后的新视频流**，`VideoAiSpecs`中的`SourceName`字段就是 `VideoSpec` 的`Name`字段。该Spec中
       未填写的 `DeviceId` 字段通过脚本调用 **<font color=#00CD00>GET</font>** **`/mediadevice/video/in`** 
       接口，根据返回的响应体算法字段，匹配后自动填入该份MCS模板文件下发出去。
    2. 本地管理需要给对应`DeviceId`的摄像头配置相应的算法。`VideoDirectorSpec`字段是导播Spec，
       其中的 `VideoSourceSet`需要添加对应的视频流。导播Spec中的 `FrameSpec`是导播策略内容，可以根据需求
       添加自己定制的策略，也可以通过 **<font color=#00CD00>GET</font>** **`/mediadevice/director-strategy`** 
       接口获取我们提供的几个导播策略模板，模板内容可以参考第3章节的 
       [3.2.13 DemoMCS演示效果](../../api/mediadevice.html#get-md-director-strategy) 。
    3. 利用 `VideoCodecSpecs` 将视频流经过编码后才能进行推拉流，录制等操作，其 `SourceName` 即相应视频流的
       `Name`字段。
    4. `RtcStreamSpec` 是通过声网方式进行视频推拉流，因为没有 `AudioSource` 和 `VideoSource`字段，所以
       只能进行音视频的拉流。下方听课端 **MCS** 里包含了 `VideoSource`字段,即听课段推出对应名字的视频流，字段的值
       就是相应视频流的 `Name` 字段。
    5. `RenderSpecs` 是用于视频回显的 Spec, 坐标字段`Geometry` 用于设置回显画面在显示屏的位置， `SourceName` 即对应的视频
       源的 `Name` 字段。坐标字段\[x, y, width, height]，x是矩形框左上角在显示设备上的水平坐标，y是左上角在显示设备上的垂直坐标
       width是矩形框的水平长度，height是矩形框的垂直高度。不指定坐标字段时表示回显的视频流将占据整个屏幕。
    6. 各个Spec字段的详细描述请阅读 [MA API 文档](../../FAQs/FAQs.html#media-agent-api)。 <br><br>
    
   * 听课端:
    
   ```json
   {
    "Name": "S1E1_Student",
    "Type": "MCS",
    "Description": "S1E1 student to push agora stream",
    "Version": "0.3",
    "VideoSpecs": [
        {
            "Name": "Student",
            "DeviceId": "0400-0000",
            "Width": 1920,
            "Height": 1080,
            "FrameRate": 30
        }
    ],
    "VideoCodecSpecs": [
        {
            "Name": "Student_Codec",
            "SourceName": "Student",
            "Codec": "h.264",
            "iFrameInterval": 30,
            "idrInterval": 30,
            "BitRateMode": "vbr",
            "BitRate": "4mbps"
        }
    ],
    "RtcStreamSpec":
    {
        "Name": "Student_Push",
        "Protocol": "Agora",
        "Channel": "S1E1_Channel",
        "Identity": "S1E1_Student",
        "VideoSource": "Student_Codec"
    },
    "RenderSpecs": [
        {
           "Name": "Render_test",
           "DeviceId": "0800-0000",
           "CompositionSpec": [
               {
                   "Geometry": [0, 0, 960, 540],
                   "SourceName": "Student"
               }
           ]
        }
      ]
    }
   ```
  
* 说明： 
    1. 通过 `VideoSpec` 添加2个摄像头作为**原始视频流**，并且通过`VideoCodecSpecs`将原始视频流进行编码，随后作为
       声网推拉流Spec `RtcStreamSpec`中的`VideoSource`字段，实现视频的本地推流。
    2. 各个Spec字段的详细描述请阅读 [MA API 文档](../../FAQs/FAQs.html#media-agent-api)。 <br><br>
    3. 整个流程可以通过使用 **[LogFile功能](/scenarios/ExpendFunction/expend.html#logfile)** ，
    打开LogFile开关可以查看一系列步骤执行下来使用的接口以及下发的MCS内容。